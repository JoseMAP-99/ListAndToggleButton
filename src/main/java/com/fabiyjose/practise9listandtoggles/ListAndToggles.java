/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.fabiyjose.practise9listandtoggles;

import java.awt.Color;
import java.sql.*;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;

/**
 *
 * @author Fabián y José María
 * user: estudiante-DIU
 * password: DIU-aed56-noi
 */
public class ListAndToggles extends javax.swing.JFrame {

    /**
     * Creates new form ListAndToggles
     */
    private String userName;
    private char [] userPassword;
    private final String query;
    private boolean connected;
    private boolean viewData;
    List<String> tablesList;
    
    private final char [] echoC = {'@','#','^','*','+', '■'};
    
    DefaultListModel model = new DefaultListModel();
    
    public ListAndToggles() {
        initComponents();
        this.query = "jdbc:mysql://mozart.dis.ulpgc.es/DIU_BD?useSSL=true";
        this.connected = false;
        
        this.setLocationRelativeTo(null);
        this.setResizable(false);
        
        int n = new Random().nextInt(echoC.length);
        userPasswordText.setEchoChar(echoC[n]);
        
        tables.setModel(model);
        multipleInterval.setSelected(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectionGroup = new javax.swing.ButtonGroup();
        loginPane = new javax.swing.JPanel();
        userNameText = new javax.swing.JTextField();
        userPasswordText = new javax.swing.JPasswordField();
        userNameLabel = new javax.swing.JLabel();
        userPasswordLabel = new javax.swing.JLabel();
        connectDBButton = new javax.swing.JButton();
        statusField = new javax.swing.JTextField();
        statusLabel = new javax.swing.JLabel();
        disconnectButton = new javax.swing.JButton();
        userDataPane = new javax.swing.JPanel();
        single = new javax.swing.JToggleButton();
        singleInterval = new javax.swing.JToggleButton();
        multipleInterval = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tables = new javax.swing.JList<>();
        selectionLabel = new javax.swing.JLabel();
        clearSelection = new javax.swing.JButton();
        viewSelection = new javax.swing.JButton();
        optionsLabel = new javax.swing.JLabel();
        getTablesButton = new javax.swing.JButton();
        signature = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Lists and toggle buttons");

        loginPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Login", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Showcard Gothic", 0, 14))); // NOI18N

        userNameLabel.setText("Username:");

        userPasswordLabel.setText("Password:");

        connectDBButton.setText("Connect");
        connectDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectDBButtonActionPerformed(evt);
            }
        });

        statusField.setEditable(false);
        statusField.setBackground(new java.awt.Color(204, 0, 51));
        statusField.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        statusField.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        statusField.setText("DISCONNECTED");
        statusField.setToolTipText("Status");

        statusLabel.setText("Status of connection:");

        disconnectButton.setText("Disconnect");
        disconnectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout loginPaneLayout = new javax.swing.GroupLayout(loginPane);
        loginPane.setLayout(loginPaneLayout);
        loginPaneLayout.setHorizontalGroup(
            loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameLabel)
                    .addComponent(userPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userNameText, javax.swing.GroupLayout.DEFAULT_SIZE, 174, Short.MAX_VALUE)
                    .addComponent(userPasswordText))
                .addGap(79, 79, 79)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(statusLabel)
                    .addGroup(loginPaneLayout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(70, 70, 70))
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addGap(105, 105, 105)
                .addComponent(connectDBButton, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(disconnectButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        loginPaneLayout.setVerticalGroup(
            loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(loginPaneLayout.createSequentialGroup()
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(loginPaneLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userNameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userNameLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(userPasswordText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(userPasswordLabel)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, loginPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(statusLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(statusField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(loginPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectDBButton)
                    .addComponent(disconnectButton))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        userDataPane.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "User data", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Showcard Gothic", 0, 14))); // NOI18N

        selectionGroup.add(single);
        single.setText("Single");
        single.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleActionPerformed(evt);
            }
        });

        selectionGroup.add(singleInterval);
        singleInterval.setText("Single interval");
        singleInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                singleIntervalActionPerformed(evt);
            }
        });

        selectionGroup.add(multipleInterval);
        multipleInterval.setText("Multiple interval");
        multipleInterval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                multipleIntervalActionPerformed(evt);
            }
        });

        tables.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jScrollPane1.setViewportView(tables);

        selectionLabel.setText("Type of selection:");

        clearSelection.setText("Clear selection");
        clearSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSelectionActionPerformed(evt);
            }
        });

        viewSelection.setText("View selection");
        viewSelection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewSelectionActionPerformed(evt);
            }
        });

        optionsLabel.setText("Options:");

        getTablesButton.setText("Get tables");
        getTablesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getTablesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout userDataPaneLayout = new javax.swing.GroupLayout(userDataPane);
        userDataPane.setLayout(userDataPaneLayout);
        userDataPaneLayout.setHorizontalGroup(
            userDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(userDataPaneLayout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addGroup(userDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(userDataPaneLayout.createSequentialGroup()
                        .addComponent(selectionLabel)
                        .addGap(94, 94, 94))
                    .addGroup(userDataPaneLayout.createSequentialGroup()
                        .addGroup(userDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, userDataPaneLayout.createSequentialGroup()
                                .addComponent(optionsLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 46, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(userDataPaneLayout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addGroup(userDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(multipleInterval, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(singleInterval, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(single, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(clearSelection, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(viewSelection, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(getTablesButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(48, 48, 48)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        userDataPaneLayout.setVerticalGroup(
            userDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, userDataPaneLayout.createSequentialGroup()
                .addGroup(userDataPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(userDataPaneLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(selectionLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(single)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(singleInterval)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(multipleInterval)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(optionsLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(clearSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(viewSelection)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getTablesButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 271, Short.MAX_VALUE))
                .addContainerGap())
        );

        signature.setText("© Jose María & Fabián");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(userDataPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(loginPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(signature)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(loginPane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(userDataPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(signature)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private String connectDB(String username, String password){
        String result = "";
        try {
            Class.forName("com.mysql.jdbc.Driver");
            try (Connection con = DriverManager.getConnection(this.query, username, password)) {
                DatabaseMetaData md = con.getMetaData();
                String[] types = {"TABLE"};
                ResultSet rs = md.getTables(null, null, "%", types);
                while (rs.next()) {
                    String nombreTabla = rs.getString("TABLE_NAME");
                    if (!viewData){
                        model.addElement(nombreTabla);
                    }
                    System.out.println("Tabla: " + nombreTabla);
                    if (viewData && tablesList.contains(nombreTabla)){
                        ResultSet rs2 = md.getColumns(null, null, nombreTabla, null);
                        while (rs2.next()) {
                            String nombreCampo = rs2.getString("COLUMN_NAME");
                                System.out.println(" Campo: " + nombreCampo);
                                nombreCampo = nombreTabla + "." + nombreCampo;
                                model.addElement(nombreCampo);
                        }
                        model.addElement("\n");
                    }
                }
                con.close();
            }
        } catch (ClassNotFoundException | SQLException ex) {
            result = ex.getMessage();
        }
        return result;
    }
    
    private void editStatus(boolean newChange){
        if (!connected && newChange){
            statusField.setText("CONNECTED");
            statusField.setBackground(Color.GREEN);
        }else if(connected && !newChange){
            statusField.setText("DISCONNECTED");
            statusField.setBackground(Color.RED);
        }
    }
    
    private void connectDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectDBButtonActionPerformed
        if (!(this.userName = userNameText.getText()).equals("") && (this.userPassword = userPasswordText.getPassword()).length > 0){
            String response;
            if (!(response = connectDB(this.userName, new String(this.userPassword))).equals("")){                
                editStatus(false); //No actualizar sin motivo la etiqueta
                JOptionPane.showMessageDialog(this, "Cannot access to Database.\n" + response, "Connection failed", JOptionPane.ERROR_MESSAGE);  
                this.connected = false;
            }else{                
                editStatus(true); //No actualizar sin motivo la etiqueta
                JOptionPane.showConfirmDialog(this, "Fully connected to Database", "Connection succesfull", JOptionPane.PLAIN_MESSAGE);    
                this.connected = true;
            }            
        } else {
            JOptionPane.showMessageDialog(this, "Please type a valid username or password.", "Connection failed", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_connectDBButtonActionPerformed

    private void singleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleActionPerformed
        tables.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
    }//GEN-LAST:event_singleActionPerformed

    private void singleIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_singleIntervalActionPerformed
        tables.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_singleIntervalActionPerformed

    private void multipleIntervalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_multipleIntervalActionPerformed
        tables.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
    }//GEN-LAST:event_multipleIntervalActionPerformed

    private void clearSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSelectionActionPerformed
        tables.clearSelection();
    }//GEN-LAST:event_clearSelectionActionPerformed

    private void viewSelectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewSelectionActionPerformed
        if (tables.getSelectedIndices().length > 0){    
            viewData = true;
            viewSelection.setEnabled(false);
            int[] selected = tables.getSelectedIndices();
            System.out.println("Posiciones: " + Arrays.toString(selected));
            System.out.println(tables.getSelectedValuesList());
            tablesList = tables.getSelectedValuesList();
            model.removeAllElements();
            connectDB(this.userName, new String(this.userPassword));
        } else {
            JOptionPane.showMessageDialog(this, "Please make a selection.", "No tables selected", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_viewSelectionActionPerformed

    private void getTablesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getTablesButtonActionPerformed
        viewData = false;
        viewSelection.setEnabled(true);
        model.removeAllElements();
        connectDB(this.userName, new String(this.userPassword));
    }//GEN-LAST:event_getTablesButtonActionPerformed

    private void disconnectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectButtonActionPerformed
        if (connected){
            userNameText.setText("");
            userPasswordText.setText("");
            statusField.setBackground(Color.RED);
            model.removeAllElements();
            connected = false;
        }        
    }//GEN-LAST:event_disconnectButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListAndToggles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListAndToggles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListAndToggles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListAndToggles.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListAndToggles().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton clearSelection;
    private javax.swing.JButton connectDBButton;
    private javax.swing.JButton disconnectButton;
    private javax.swing.JButton getTablesButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel loginPane;
    private javax.swing.JToggleButton multipleInterval;
    private javax.swing.JLabel optionsLabel;
    private javax.swing.ButtonGroup selectionGroup;
    private javax.swing.JLabel selectionLabel;
    private javax.swing.JLabel signature;
    private javax.swing.JToggleButton single;
    private javax.swing.JToggleButton singleInterval;
    private javax.swing.JTextField statusField;
    private javax.swing.JLabel statusLabel;
    private javax.swing.JList<String> tables;
    private javax.swing.JPanel userDataPane;
    private javax.swing.JLabel userNameLabel;
    private javax.swing.JTextField userNameText;
    private javax.swing.JLabel userPasswordLabel;
    private javax.swing.JPasswordField userPasswordText;
    private javax.swing.JButton viewSelection;
    // End of variables declaration//GEN-END:variables
}
